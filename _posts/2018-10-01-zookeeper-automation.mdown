---
layout:     post
title:      Zookeeper Automation
author:     Haibin
tags:		github distriuted-system python
subtitle:  	determine their own id, and provide host IP to each other
category:  projects
---

## zookeeper automation
Basically, it's like if you have 5 machines, how to generate an unique id on their own.  

From Raft, we can elect a leader first, and then determine Id for each machine.  
#### But
Using Raft to elect a leader is complecated. For this case, we may have a much easier solution.  

we can let machines follow one common rule to decide which Id they should get.  

In my implementaion, I choose their IP as the common key, and their ID can be determined by their IP order in the sorted IPs.

## Background
Zookeeper requires zoo.cfg and unique myid to start. A zookeeper cluster, in general, has 5 zookeepers. That means each zookeeper needs an unique myid from 1 to 5. Before we prepared zoo.cfg and myid manually. It's not convenient when we deploy zookeepers to a new environment or some instance got replaced because of maintenance. So we want some automation in place to generate the necessary zoo.cfg and myid etc.

## Requirements
Zookeeper automation includes two parts:    deployment + maintenance.
1. deployment: zookeeper automation would provide zoo.cfg and unique myid for each zookeeper.
2. maintenance: zookeeper automation would let newly started zookeeper know it's joining an existing zookeeper cluster, and provide the same zoo.cfg and myid for it as the previous one.

## Basic Idea
<div style="text-align:center"><img src= "{{ "/img/projects/zookeeper_automation/basicIdea.png " | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
The basic idea is when a new zookeeper deployed to a cluster, we need to figure out: whether the cluster is a new cluster or not.
Then we can prepare appropriate config files. 

## Solutions
There are several ways(we tried) to achieve these requirements:
Basically, I choose their IP as the common key, and their ID can be determined by their IP order in the sorted IPs.  

Zookeepers get their "static" IP, associate it and get all other zookeepers "static" IPs. All zookeepers sort their "static" IP and get the same ordered list. Then each zookeeper can generate their unique myid based on their IP order in the sorted list.

### eip(Elastic IP)
![Alt text](images/eip.png?raw=true "eip")
<div style="text-align:center"><img src= "{{ "/img/projects/zookeeper_automation/eip.png " | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
This idea is using Elastic IP as a static IP.
### eni(Elastic Network Interface)
![Alt text](images/eni.png?raw=true "eni")
<div style="text-align:center"><img src= "{{ "/img/projects/zookeeper_automation/eni.png " | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
This idea is using eni(the secondary private IP) as a static IP.
### private_ip(dynamic config file)
![Alt text](images/private_ip.png?raw=true "private_ip")
<div style="text-align:center"><img src= "{{ "/img/projects/zookeeper_automation/private_ip.png " | prepend: site.baseurl }}" style="width: 100%; margin-left: 0%; margin-right: 0%;"></div>
This idea is using the newer version of zookeeper(3.5.0+) to enable the dynamic reconfiguration feature.
### Link
You may check logic charts and more details via this link.
<a href="https://github.com/HarbinZhang/zookeeper_automation" style="color: rgb(0,102,204)">More details</a>
